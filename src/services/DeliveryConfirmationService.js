import { useAuthAxios } from "../hooks/useAuthAxios";
import { useCallback } from "react";
import { Alert } from "react-native";

export const useDeliveryConfirmationService = () => {
  const axiosInstance = useAuthAxios();

  /**
   * Genera c√≥digo de confirmaci√≥n y lo env√≠a al cliente por email
   * PARA USO DEL EQUIPO QR SCANNER
   */
  const generateDeliveryCode = useCallback(
    async (routeId) => {
      try {
        const response = await axiosInstance.post('/delivery-codes/generate', {
          routeId
        });
        
        console.log("‚úÖ C√≥digo generado y enviado al cliente:", response.data);
        return response.data;
      } catch (error) {
        console.error("‚ùå Error generando c√≥digo:", error);
        
        if (error.response) {
          const errorMessage = error.response.data?.error || "Error generando c√≥digo";
          console.error("Server error:", errorMessage);
          // NO mostramos Alert aqu√≠ - lo maneja el equipo QR
          throw new Error(errorMessage);
        } else if (error.request) {
          console.error("Network error:", error.request);
          throw new Error("Sin conexi√≥n al servidor");
        } else {
          console.error("Unexpected error:", error.message);
          throw new Error(error.message);
        }
      }
    },
    [axiosInstance]
  );

  /**
   * Valida el c√≥digo de confirmaci√≥n ingresado por el delivery
   * PARA USO DE TU EQUIPO (pantalla de validaci√≥n)
   */
  const validateDeliveryCode = useCallback(
    async (routeId, confirmationCode) => {
      try {
        const response = await axiosInstance.post('/delivery-codes/validate', {
          routeId,
          confirmationCode
        });
        
        console.log("‚úÖ Entrega confirmada:", response.data);
        return response.data;
      } catch (error) {
        console.error("‚ùå Error validando c√≥digo:", error);
        
        if (error.response) {
          const errorMessage = error.response.data?.error || "C√≥digo incorrecto";
          const statusCode = error.response.status;
          
          // S√ç mostramos Alert porque es para tu UI
          if (statusCode === 400) {
            Alert.alert("C√≥digo inv√°lido", errorMessage);
          } else if (statusCode === 410) {
            Alert.alert("C√≥digo expirado", errorMessage);
          } else if (statusCode === 404) {
            Alert.alert("Ruta no encontrada", errorMessage);
          } else {
            Alert.alert("Error", errorMessage);
          }
        } else if (error.request) {
          Alert.alert("Sin conexi√≥n", "Verifica tu conexi√≥n a internet");
        } else {
          Alert.alert("Error inesperado", error.message);
        }
        throw error;
      }
    },
    [axiosInstance]
  );

  return {
    generateDeliveryCode, // üÜï Para el equipo QR Scanner
    validateDeliveryCode  // Para tu equipo (pantalla de validaci√≥n)
  };
};